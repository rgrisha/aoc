(ns aoc.day16
  (:require [aoc.utils :as u]
            [clojure.string :as s]
            [clojure.set :as cset]))

(defn get-data []
  (let [data (u/get-day-data 16 identity) ]
    (first data)))



(defn dec2bins [d]
  (loop [acc '() n d step 4]
    (if (zero? step)
      acc
      (recur (cons (rem n 2) acc) (quot n 2) (dec step)))))

(defn hexs-to-bins [s]
  (reduce (fn [a v]
            (let [cn (int v)]
              (into a (if (> cn (int \9)) (dec2bins (+ 10 (- cn (int \A)))) (dec2bins (- cn (int \0))))))) 
          [] 
          (seq s)))

(defn bins-to-dec [ss]
  (reduce (fn [a v] (+ v (bit-shift-left a 1)) ) ss))

(defn decode-literal [ps]
  (loop [s ps acc []]
    (let [[h t] (split-at 1 s)]
      (if (zero? (first h))
        (bins-to-dec (concat acc (take 4 t)))
        (recur (drop 4 t) (concat acc (take 4 t)))))))


(defn decode-operator [pfn ps]
  (let [[h t] (split-at 1 ps)]
    (if (= 0 h)
      (let [[h t]] )
      )
    )
  )

(defn decode-packet [ps]
  (let [[h t] (split-at 3 ps)
         pver (bins-to-dec h)     
         [h t] (split-at 3 t)
         ptyp (bins-to-dec h)]
    (cond
      (= ptyp 4) {:ver pver :typ ptyp :literal (decode-literal t)}
      :else      {:ver pver :type ptyp :operator (decode-operator decode-packet t)}) 
    ))

(defn decode [s]
  (let [nseq (hexs-to-bins s)
        
        ]
   (decode-packet nseq) 
    ))

(defn run-1 []
  (let [data (get-data)
        ]
    data
    )
  )
