(ns aoc.day12
  (:require [aoc.utils :as u]
            [clojure.string :as s]
            [clojure.set :as cset]))

(defn gen-parts [d]
  (->> (into d (map (fn [[a b]] [b a]) d))
       (filter (fn [[a _]] (not= a "end"))) 
       (filter (fn [[_ b]] (not= b "start"))) 
       (reduce (fn [a [k v]] (update a k #(conj (or %1 []) v))) {})) )

(defn filter-caves [path new-dests]
  (let [p (into #{} (filter #(re-matches #"[a-z]+" %1)  path))] 
    (filter #(not (contains? p %1)) new-dests)))

(defn find-path [d p] 
  (let [pe (last p)
        pv (d pe)]
    (map #(conj p %1) (filter-caves p pv)))) 

(defn gen-paths [d]
  (loop [ps [["start"]] n 10 paths-coll []]  
    (let [new-ps (map (partial find-path d) ps)
          new-ps (apply concat new-ps)
          new-paths-coll (concat paths-coll (filter #(= (last %1) "end") new-ps))]
      ;(println "new ps: " new-ps)
      
      (if (> n 0)
        (recur new-ps (dec n) new-paths-coll)
        new-paths-coll
        )
      )
    ))

;4662 not ok too low

(defn run-1 []
  (let [data  (u/get-day-data 12 #(s/split %1 #"-") :test2)
        paths (gen-parts data)
        ]
    (println "parts: " paths)
    (gen-paths paths)
    ))


